//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace VacationMasters
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::VacationMasters.VacationMasters_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace VacationMasters.VacationMasters_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[32];
            _typeNameTable[0] = "VacationMasters.Screens.AdminControl";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "Boolean";
            _typeNameTable[3] = "System.Collections.ObjectModel.ObservableCollection`1<VacationMasters.Essentials.Package>";
            _typeNameTable[4] = "System.Collections.ObjectModel.Collection`1<VacationMasters.Essentials.Package>";
            _typeNameTable[5] = "Object";
            _typeNameTable[6] = "VacationMasters.Essentials.Package";
            _typeNameTable[7] = "Int32";
            _typeNameTable[8] = "String";
            _typeNameTable[9] = "Double";
            _typeNameTable[10] = "System.DateTime";
            _typeNameTable[11] = "System.ValueType";
            _typeNameTable[12] = "Byte[]";
            _typeNameTable[13] = "System.Array";
            _typeNameTable[14] = "Byte";
            _typeNameTable[15] = "Windows.UI.Xaml.Media.ImageSource";
            _typeNameTable[16] = "VacationMasters.Screens.Register";
            _typeNameTable[17] = "VacationMasters.UserManagement.UserManager";
            _typeNameTable[18] = "VacationMasters.Wrappers.DbWrapper";
            _typeNameTable[19] = "VacationMasters.Essentials.GroupManager";
            _typeNameTable[20] = "VacationMasters.Screens.Contact";
            _typeNameTable[21] = "VacationMasters.Screens.Login";
            _typeNameTable[22] = "VacationMasters.Screens.PackagesDisplay";
            _typeNameTable[23] = "VacationMasters.Screens.AgentPage";
            _typeNameTable[24] = "VacationMasters.MainPage";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[26] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[27] = "Windows.UI.Color";
            _typeNameTable[28] = "VacationMasters.Resources.CircularProgressBar";
            _typeNameTable[29] = "VacationMasters.Resources.Converters.BooleanToImageConverter";
            _typeNameTable[30] = "VacationMasters.Resources.Converters.BooleanToVisibilityConverter";
            _typeNameTable[31] = "VacationMasters.Screens.BlankPage1";

            _typeTable = new global::System.Type[32];
            _typeTable[0] = typeof(global::VacationMasters.Screens.AdminControl);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::System.Boolean);
            _typeTable[3] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::VacationMasters.Essentials.Package>);
            _typeTable[4] = typeof(global::System.Collections.ObjectModel.Collection<global::VacationMasters.Essentials.Package>);
            _typeTable[5] = typeof(global::System.Object);
            _typeTable[6] = typeof(global::VacationMasters.Essentials.Package);
            _typeTable[7] = typeof(global::System.Int32);
            _typeTable[8] = typeof(global::System.String);
            _typeTable[9] = typeof(global::System.Double);
            _typeTable[10] = typeof(global::System.DateTime);
            _typeTable[11] = typeof(global::System.ValueType);
            _typeTable[12] = typeof(global::System.Byte[]);
            _typeTable[13] = typeof(global::System.Array);
            _typeTable[14] = typeof(global::System.Byte);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Media.ImageSource);
            _typeTable[16] = typeof(global::VacationMasters.Screens.Register);
            _typeTable[17] = typeof(global::VacationMasters.UserManagement.UserManager);
            _typeTable[18] = typeof(global::VacationMasters.Wrappers.DbWrapper);
            _typeTable[19] = typeof(global::VacationMasters.Essentials.GroupManager);
            _typeTable[20] = typeof(global::VacationMasters.Screens.Contact);
            _typeTable[21] = typeof(global::VacationMasters.Screens.Login);
            _typeTable[22] = typeof(global::VacationMasters.Screens.PackagesDisplay);
            _typeTable[23] = typeof(global::VacationMasters.Screens.AgentPage);
            _typeTable[24] = typeof(global::VacationMasters.MainPage);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[27] = typeof(global::Windows.UI.Color);
            _typeTable[28] = typeof(global::VacationMasters.Resources.CircularProgressBar);
            _typeTable[29] = typeof(global::VacationMasters.Resources.Converters.BooleanToImageConverter);
            _typeTable[30] = typeof(global::VacationMasters.Resources.Converters.BooleanToVisibilityConverter);
            _typeTable[31] = typeof(global::VacationMasters.Screens.BlankPage1);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AdminControl() { return new global::VacationMasters.Screens.AdminControl(); }
        private object Activate_3_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::VacationMasters.Essentials.Package>(); }
        private object Activate_4_Collection() { return new global::System.Collections.ObjectModel.Collection<global::VacationMasters.Essentials.Package>(); }
        private object Activate_6_Package() { return new global::VacationMasters.Essentials.Package(); }
        private object Activate_16_Register() { return new global::VacationMasters.Screens.Register(); }
        private object Activate_18_DbWrapper() { return new global::VacationMasters.Wrappers.DbWrapper(); }
        private object Activate_20_Contact() { return new global::VacationMasters.Screens.Contact(); }
        private object Activate_21_Login() { return new global::VacationMasters.Screens.Login(); }
        private object Activate_22_PackagesDisplay() { return new global::VacationMasters.Screens.PackagesDisplay(); }
        private object Activate_23_AgentPage() { return new global::VacationMasters.Screens.AgentPage(); }
        private object Activate_24_MainPage() { return new global::VacationMasters.MainPage(); }
        private object Activate_28_CircularProgressBar() { return new global::VacationMasters.Resources.CircularProgressBar(); }
        private object Activate_29_BooleanToImageConverter() { return new global::VacationMasters.Resources.Converters.BooleanToImageConverter(); }
        private object Activate_30_BooleanToVisibilityConverter() { return new global::VacationMasters.Resources.Converters.BooleanToVisibilityConverter(); }
        private object Activate_31_BlankPage1() { return new global::VacationMasters.Screens.BlankPage1(); }
        private void VectorAdd_3_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::VacationMasters.Essentials.Package>)instance;
            var newItem = (global::VacationMasters.Essentials.Package)item;
            collection.Add(newItem);
        }
        private void VectorAdd_4_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::VacationMasters.Essentials.Package>)instance;
            var newItem = (global::VacationMasters.Essentials.Package)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  VacationMasters.Screens.AdminControl
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_AdminControl;
                userType.AddMemberName("Banned");
                userType.AddMemberName("IsUserSearched");
                userType.AddMemberName("IsOperationInProgress");
                userType.AddMemberName("IsUserManagerActive");
                userType.AddMemberName("IsNewsletterActive");
                userType.AddMemberName("IsPackageActive");
                userType.AddMemberName("PackageDisplay");
                userType.AddMemberName("List");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Boolean
                xamlType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  System.Collections.ObjectModel.ObservableCollection`1<VacationMasters.Essentials.Package>
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<VacationMasters.Essentials.Package>"));
                userType.CollectionAdd = VectorAdd_3_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  System.Collections.ObjectModel.Collection`1<VacationMasters.Essentials.Package>
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_Collection;
                userType.CollectionAdd = VectorAdd_4_Collection;
                xamlType = userType;
                break;

            case 5:   //  Object
                xamlType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  VacationMasters.Essentials.Package
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_Package;
                userType.AddMemberName("ID");
                userType.AddMemberName("Name");
                userType.AddMemberName("Type");
                userType.AddMemberName("Included");
                userType.AddMemberName("Transport");
                userType.AddMemberName("Price");
                userType.AddMemberName("SearchIndex");
                userType.AddMemberName("Rating");
                userType.AddMemberName("BeginDate");
                userType.AddMemberName("EndDate");
                userType.AddMemberName("Picture");
                userType.AddMemberName("Photo");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Int32
                xamlType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  String
                xamlType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Double
                xamlType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  System.DateTime
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  System.ValueType
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  Byte[]
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 13:   //  System.Array
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 14:   //  Byte
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Xaml.Media.ImageSource
                xamlType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  VacationMasters.Screens.Register
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_Register;
                userType.AddMemberName("UserManager");
                userType.AddMemberName("DbWrapper");
                userType.AddMemberName("GroupManager");
                userType.AddMemberName("IsOperationInProgress");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  VacationMasters.UserManagement.UserManager
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  VacationMasters.Wrappers.DbWrapper
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  VacationMasters.Essentials.GroupManager
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  VacationMasters.Screens.Contact
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_20_Contact;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  VacationMasters.Screens.Login
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_21_Login;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  VacationMasters.Screens.PackagesDisplay
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_22_PackagesDisplay;
                userType.AddMemberName("UserManager");
                userType.AddMemberName("DbWrapper");
                userType.AddMemberName("IsOperationInProgress");
                userType.AddMemberName("List");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  VacationMasters.Screens.AgentPage
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_23_AgentPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  VacationMasters.MainPage
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_MainPage;
                userType.AddMemberName("DbWrapper");
                userType.AddMemberName("CollapsedVisibility");
                userType.AddMemberName("VisibleVisibility");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Windows.UI.Color
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 28:   //  VacationMasters.Resources.CircularProgressBar
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_28_CircularProgressBar;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  VacationMasters.Resources.Converters.BooleanToImageConverter
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_29_BooleanToImageConverter;
                userType.AddMemberName("FalseIcon");
                userType.AddMemberName("TrueIcon");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  VacationMasters.Resources.Converters.BooleanToVisibilityConverter
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_30_BooleanToVisibilityConverter;
                userType.AddMemberName("TrueValue");
                userType.AddMemberName("FalseValue");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  VacationMasters.Screens.BlankPage1
                userType = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_BlankPage1;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_AdminControl_Banned(object instance)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            return that.Banned;
        }
        private void set_0_AdminControl_Banned(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            that.Banned = (global::System.Boolean)Value;
        }
        private object get_1_AdminControl_IsUserSearched(object instance)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            return that.IsUserSearched;
        }
        private void set_1_AdminControl_IsUserSearched(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            that.IsUserSearched = (global::System.Boolean)Value;
        }
        private object get_2_AdminControl_IsOperationInProgress(object instance)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            return that.IsOperationInProgress;
        }
        private void set_2_AdminControl_IsOperationInProgress(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            that.IsOperationInProgress = (global::System.Boolean)Value;
        }
        private object get_3_AdminControl_IsUserManagerActive(object instance)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            return that.IsUserManagerActive;
        }
        private void set_3_AdminControl_IsUserManagerActive(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            that.IsUserManagerActive = (global::System.Boolean)Value;
        }
        private object get_4_AdminControl_IsNewsletterActive(object instance)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            return that.IsNewsletterActive;
        }
        private void set_4_AdminControl_IsNewsletterActive(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            that.IsNewsletterActive = (global::System.Boolean)Value;
        }
        private object get_5_AdminControl_IsPackageActive(object instance)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            return that.IsPackageActive;
        }
        private void set_5_AdminControl_IsPackageActive(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            that.IsPackageActive = (global::System.Boolean)Value;
        }
        private object get_6_AdminControl_PackageDisplay(object instance)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            return that.PackageDisplay;
        }
        private void set_6_AdminControl_PackageDisplay(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            that.PackageDisplay = (global::System.Boolean)Value;
        }
        private object get_7_AdminControl_List(object instance)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            return that.List;
        }
        private void set_7_AdminControl_List(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.AdminControl)instance;
            that.List = (global::System.Collections.ObjectModel.ObservableCollection<global::VacationMasters.Essentials.Package>)Value;
        }
        private object get_8_Package_ID(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.ID;
        }
        private void set_8_Package_ID(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.ID = (global::System.Int32)Value;
        }
        private object get_9_Package_Name(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.Name;
        }
        private void set_9_Package_Name(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_10_Package_Type(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.Type;
        }
        private void set_10_Package_Type(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.Type = (global::System.String)Value;
        }
        private object get_11_Package_Included(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.Included;
        }
        private void set_11_Package_Included(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.Included = (global::System.String)Value;
        }
        private object get_12_Package_Transport(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.Transport;
        }
        private void set_12_Package_Transport(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.Transport = (global::System.String)Value;
        }
        private object get_13_Package_Price(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.Price;
        }
        private void set_13_Package_Price(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.Price = (global::System.Double)Value;
        }
        private object get_14_Package_SearchIndex(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.SearchIndex;
        }
        private void set_14_Package_SearchIndex(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.SearchIndex = (global::System.Double)Value;
        }
        private object get_15_Package_Rating(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.Rating;
        }
        private void set_15_Package_Rating(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.Rating = (global::System.Double)Value;
        }
        private object get_16_Package_BeginDate(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.BeginDate;
        }
        private void set_16_Package_BeginDate(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.BeginDate = (global::System.DateTime)Value;
        }
        private object get_17_Package_EndDate(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.EndDate;
        }
        private void set_17_Package_EndDate(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.EndDate = (global::System.DateTime)Value;
        }
        private object get_18_Package_Picture(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.Picture;
        }
        private void set_18_Package_Picture(object instance, object Value)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            that.Picture = (global::System.Byte[])Value;
        }
        private object get_19_Package_Photo(object instance)
        {
            var that = (global::VacationMasters.Essentials.Package)instance;
            return that.Photo;
        }
        private object get_20_Register_UserManager(object instance)
        {
            var that = (global::VacationMasters.Screens.Register)instance;
            return that.UserManager;
        }
        private void set_20_Register_UserManager(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.Register)instance;
            that.UserManager = (global::VacationMasters.UserManagement.UserManager)Value;
        }
        private object get_21_Register_DbWrapper(object instance)
        {
            var that = (global::VacationMasters.Screens.Register)instance;
            return that.DbWrapper;
        }
        private void set_21_Register_DbWrapper(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.Register)instance;
            that.DbWrapper = (global::VacationMasters.Wrappers.DbWrapper)Value;
        }
        private object get_22_Register_GroupManager(object instance)
        {
            var that = (global::VacationMasters.Screens.Register)instance;
            return that.GroupManager;
        }
        private void set_22_Register_GroupManager(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.Register)instance;
            that.GroupManager = (global::VacationMasters.Essentials.GroupManager)Value;
        }
        private object get_23_Register_IsOperationInProgress(object instance)
        {
            var that = (global::VacationMasters.Screens.Register)instance;
            return that.IsOperationInProgress;
        }
        private void set_23_Register_IsOperationInProgress(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.Register)instance;
            that.IsOperationInProgress = (global::System.Boolean)Value;
        }
        private object get_24_PackagesDisplay_UserManager(object instance)
        {
            var that = (global::VacationMasters.Screens.PackagesDisplay)instance;
            return that.UserManager;
        }
        private void set_24_PackagesDisplay_UserManager(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.PackagesDisplay)instance;
            that.UserManager = (global::VacationMasters.UserManagement.UserManager)Value;
        }
        private object get_25_PackagesDisplay_DbWrapper(object instance)
        {
            var that = (global::VacationMasters.Screens.PackagesDisplay)instance;
            return that.DbWrapper;
        }
        private void set_25_PackagesDisplay_DbWrapper(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.PackagesDisplay)instance;
            that.DbWrapper = (global::VacationMasters.Wrappers.DbWrapper)Value;
        }
        private object get_26_PackagesDisplay_IsOperationInProgress(object instance)
        {
            var that = (global::VacationMasters.Screens.PackagesDisplay)instance;
            return that.IsOperationInProgress;
        }
        private void set_26_PackagesDisplay_IsOperationInProgress(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.PackagesDisplay)instance;
            that.IsOperationInProgress = (global::System.Boolean)Value;
        }
        private object get_27_PackagesDisplay_List(object instance)
        {
            var that = (global::VacationMasters.Screens.PackagesDisplay)instance;
            return that.List;
        }
        private void set_27_PackagesDisplay_List(object instance, object Value)
        {
            var that = (global::VacationMasters.Screens.PackagesDisplay)instance;
            that.List = (global::System.Collections.ObjectModel.ObservableCollection<global::VacationMasters.Essentials.Package>)Value;
        }
        private object get_28_MainPage_DbWrapper(object instance)
        {
            var that = (global::VacationMasters.MainPage)instance;
            return that.DbWrapper;
        }
        private void set_28_MainPage_DbWrapper(object instance, object Value)
        {
            var that = (global::VacationMasters.MainPage)instance;
            that.DbWrapper = (global::VacationMasters.Wrappers.DbWrapper)Value;
        }
        private object get_29_MainPage_CollapsedVisibility(object instance)
        {
            var that = (global::VacationMasters.MainPage)instance;
            return that.CollapsedVisibility;
        }
        private object get_30_MainPage_VisibleVisibility(object instance)
        {
            var that = (global::VacationMasters.MainPage)instance;
            return that.VisibleVisibility;
        }
        private object get_31_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_31_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_32_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_32_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_33_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_33_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_34_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_34_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_35_BooleanToImageConverter_FalseIcon(object instance)
        {
            var that = (global::VacationMasters.Resources.Converters.BooleanToImageConverter)instance;
            return that.FalseIcon;
        }
        private void set_35_BooleanToImageConverter_FalseIcon(object instance, object Value)
        {
            var that = (global::VacationMasters.Resources.Converters.BooleanToImageConverter)instance;
            that.FalseIcon = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_36_BooleanToImageConverter_TrueIcon(object instance)
        {
            var that = (global::VacationMasters.Resources.Converters.BooleanToImageConverter)instance;
            return that.TrueIcon;
        }
        private void set_36_BooleanToImageConverter_TrueIcon(object instance, object Value)
        {
            var that = (global::VacationMasters.Resources.Converters.BooleanToImageConverter)instance;
            that.TrueIcon = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_37_BooleanToVisibilityConverter_TrueValue(object instance)
        {
            var that = (global::VacationMasters.Resources.Converters.BooleanToVisibilityConverter)instance;
            return that.TrueValue;
        }
        private void set_37_BooleanToVisibilityConverter_TrueValue(object instance, object Value)
        {
            var that = (global::VacationMasters.Resources.Converters.BooleanToVisibilityConverter)instance;
            that.TrueValue = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_38_BooleanToVisibilityConverter_FalseValue(object instance)
        {
            var that = (global::VacationMasters.Resources.Converters.BooleanToVisibilityConverter)instance;
            return that.FalseValue;
        }
        private void set_38_BooleanToVisibilityConverter_FalseValue(object instance, object Value)
        {
            var that = (global::VacationMasters.Resources.Converters.BooleanToVisibilityConverter)instance;
            that.FalseValue = (global::Windows.UI.Xaml.Visibility)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember xamlMember = null;
            global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "VacationMasters.Screens.AdminControl.Banned":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.AdminControl");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "Banned", "Boolean");
                xamlMember.Getter = get_0_AdminControl_Banned;
                xamlMember.Setter = set_0_AdminControl_Banned;
                break;
            case "VacationMasters.Screens.AdminControl.IsUserSearched":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.AdminControl");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "IsUserSearched", "Boolean");
                xamlMember.Getter = get_1_AdminControl_IsUserSearched;
                xamlMember.Setter = set_1_AdminControl_IsUserSearched;
                break;
            case "VacationMasters.Screens.AdminControl.IsOperationInProgress":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.AdminControl");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "IsOperationInProgress", "Boolean");
                xamlMember.Getter = get_2_AdminControl_IsOperationInProgress;
                xamlMember.Setter = set_2_AdminControl_IsOperationInProgress;
                break;
            case "VacationMasters.Screens.AdminControl.IsUserManagerActive":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.AdminControl");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "IsUserManagerActive", "Boolean");
                xamlMember.Getter = get_3_AdminControl_IsUserManagerActive;
                xamlMember.Setter = set_3_AdminControl_IsUserManagerActive;
                break;
            case "VacationMasters.Screens.AdminControl.IsNewsletterActive":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.AdminControl");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "IsNewsletterActive", "Boolean");
                xamlMember.Getter = get_4_AdminControl_IsNewsletterActive;
                xamlMember.Setter = set_4_AdminControl_IsNewsletterActive;
                break;
            case "VacationMasters.Screens.AdminControl.IsPackageActive":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.AdminControl");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "IsPackageActive", "Boolean");
                xamlMember.Getter = get_5_AdminControl_IsPackageActive;
                xamlMember.Setter = set_5_AdminControl_IsPackageActive;
                break;
            case "VacationMasters.Screens.AdminControl.PackageDisplay":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.AdminControl");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "PackageDisplay", "Boolean");
                xamlMember.Getter = get_6_AdminControl_PackageDisplay;
                xamlMember.Setter = set_6_AdminControl_PackageDisplay;
                break;
            case "VacationMasters.Screens.AdminControl.List":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.AdminControl");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "List", "System.Collections.ObjectModel.ObservableCollection`1<VacationMasters.Essentials.Package>");
                xamlMember.Getter = get_7_AdminControl_List;
                xamlMember.Setter = set_7_AdminControl_List;
                break;
            case "VacationMasters.Essentials.Package.ID":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "ID", "Int32");
                xamlMember.Getter = get_8_Package_ID;
                xamlMember.Setter = set_8_Package_ID;
                break;
            case "VacationMasters.Essentials.Package.Name":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_9_Package_Name;
                xamlMember.Setter = set_9_Package_Name;
                break;
            case "VacationMasters.Essentials.Package.Type":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "Type", "String");
                xamlMember.Getter = get_10_Package_Type;
                xamlMember.Setter = set_10_Package_Type;
                break;
            case "VacationMasters.Essentials.Package.Included":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "Included", "String");
                xamlMember.Getter = get_11_Package_Included;
                xamlMember.Setter = set_11_Package_Included;
                break;
            case "VacationMasters.Essentials.Package.Transport":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "Transport", "String");
                xamlMember.Getter = get_12_Package_Transport;
                xamlMember.Setter = set_12_Package_Transport;
                break;
            case "VacationMasters.Essentials.Package.Price":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "Price", "Double");
                xamlMember.Getter = get_13_Package_Price;
                xamlMember.Setter = set_13_Package_Price;
                break;
            case "VacationMasters.Essentials.Package.SearchIndex":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "SearchIndex", "Double");
                xamlMember.Getter = get_14_Package_SearchIndex;
                xamlMember.Setter = set_14_Package_SearchIndex;
                break;
            case "VacationMasters.Essentials.Package.Rating":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "Rating", "Double");
                xamlMember.Getter = get_15_Package_Rating;
                xamlMember.Setter = set_15_Package_Rating;
                break;
            case "VacationMasters.Essentials.Package.BeginDate":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "BeginDate", "System.DateTime");
                xamlMember.Getter = get_16_Package_BeginDate;
                xamlMember.Setter = set_16_Package_BeginDate;
                break;
            case "VacationMasters.Essentials.Package.EndDate":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "EndDate", "System.DateTime");
                xamlMember.Getter = get_17_Package_EndDate;
                xamlMember.Setter = set_17_Package_EndDate;
                break;
            case "VacationMasters.Essentials.Package.Picture":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "Picture", "Byte[]");
                xamlMember.Getter = get_18_Package_Picture;
                xamlMember.Setter = set_18_Package_Picture;
                break;
            case "VacationMasters.Essentials.Package.Photo":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Essentials.Package");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "Photo", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Getter = get_19_Package_Photo;
                xamlMember.SetIsReadOnly();
                break;
            case "VacationMasters.Screens.Register.UserManager":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.Register");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "UserManager", "VacationMasters.UserManagement.UserManager");
                xamlMember.Getter = get_20_Register_UserManager;
                xamlMember.Setter = set_20_Register_UserManager;
                break;
            case "VacationMasters.Screens.Register.DbWrapper":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.Register");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "DbWrapper", "VacationMasters.Wrappers.DbWrapper");
                xamlMember.Getter = get_21_Register_DbWrapper;
                xamlMember.Setter = set_21_Register_DbWrapper;
                break;
            case "VacationMasters.Screens.Register.GroupManager":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.Register");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "GroupManager", "VacationMasters.Essentials.GroupManager");
                xamlMember.Getter = get_22_Register_GroupManager;
                xamlMember.Setter = set_22_Register_GroupManager;
                break;
            case "VacationMasters.Screens.Register.IsOperationInProgress":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.Register");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "IsOperationInProgress", "Boolean");
                xamlMember.Getter = get_23_Register_IsOperationInProgress;
                xamlMember.Setter = set_23_Register_IsOperationInProgress;
                break;
            case "VacationMasters.Screens.PackagesDisplay.UserManager":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.PackagesDisplay");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "UserManager", "VacationMasters.UserManagement.UserManager");
                xamlMember.Getter = get_24_PackagesDisplay_UserManager;
                xamlMember.Setter = set_24_PackagesDisplay_UserManager;
                break;
            case "VacationMasters.Screens.PackagesDisplay.DbWrapper":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.PackagesDisplay");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "DbWrapper", "VacationMasters.Wrappers.DbWrapper");
                xamlMember.Getter = get_25_PackagesDisplay_DbWrapper;
                xamlMember.Setter = set_25_PackagesDisplay_DbWrapper;
                break;
            case "VacationMasters.Screens.PackagesDisplay.IsOperationInProgress":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.PackagesDisplay");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "IsOperationInProgress", "Boolean");
                xamlMember.Getter = get_26_PackagesDisplay_IsOperationInProgress;
                xamlMember.Setter = set_26_PackagesDisplay_IsOperationInProgress;
                break;
            case "VacationMasters.Screens.PackagesDisplay.List":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Screens.PackagesDisplay");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "List", "System.Collections.ObjectModel.ObservableCollection`1<VacationMasters.Essentials.Package>");
                xamlMember.Getter = get_27_PackagesDisplay_List;
                xamlMember.Setter = set_27_PackagesDisplay_List;
                break;
            case "VacationMasters.MainPage.DbWrapper":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.MainPage");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "DbWrapper", "VacationMasters.Wrappers.DbWrapper");
                xamlMember.Getter = get_28_MainPage_DbWrapper;
                xamlMember.Setter = set_28_MainPage_DbWrapper;
                break;
            case "VacationMasters.MainPage.CollapsedVisibility":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.MainPage");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "CollapsedVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_29_MainPage_CollapsedVisibility;
                xamlMember.SetIsReadOnly();
                break;
            case "VacationMasters.MainPage.VisibleVisibility":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.MainPage");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "VisibleVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_30_MainPage_VisibleVisibility;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.UI.Color.A":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_31_Color_A;
                xamlMember.Setter = set_31_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_32_Color_B;
                xamlMember.Setter = set_32_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_33_Color_G;
                xamlMember.Setter = set_33_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_34_Color_R;
                xamlMember.Setter = set_34_Color_R;
                break;
            case "VacationMasters.Resources.Converters.BooleanToImageConverter.FalseIcon":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Resources.Converters.BooleanToImageConverter");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "FalseIcon", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Getter = get_35_BooleanToImageConverter_FalseIcon;
                xamlMember.Setter = set_35_BooleanToImageConverter_FalseIcon;
                break;
            case "VacationMasters.Resources.Converters.BooleanToImageConverter.TrueIcon":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Resources.Converters.BooleanToImageConverter");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "TrueIcon", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Getter = get_36_BooleanToImageConverter_TrueIcon;
                xamlMember.Setter = set_36_BooleanToImageConverter_TrueIcon;
                break;
            case "VacationMasters.Resources.Converters.BooleanToVisibilityConverter.TrueValue":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Resources.Converters.BooleanToVisibilityConverter");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "TrueValue", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_37_BooleanToVisibilityConverter_TrueValue;
                xamlMember.Setter = set_37_BooleanToVisibilityConverter_TrueValue;
                break;
            case "VacationMasters.Resources.Converters.BooleanToVisibilityConverter.FalseValue":
                userType = (global::VacationMasters.VacationMasters_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VacationMasters.Resources.Converters.BooleanToVisibilityConverter");
                xamlMember = new global::VacationMasters.VacationMasters_XamlTypeInfo.XamlMember(this, "FalseValue", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_38_BooleanToVisibilityConverter_FalseValue;
                xamlMember.Setter = set_38_BooleanToVisibilityConverter_FalseValue;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::VacationMasters.VacationMasters_XamlTypeInfo.XamlSystemBaseType
    {
        global::VacationMasters.VacationMasters_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::VacationMasters.VacationMasters_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::VacationMasters.VacationMasters_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::VacationMasters.VacationMasters_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


